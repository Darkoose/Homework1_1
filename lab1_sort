using System.Diagnostics;
using System.IO;
using System.Linq.Expressions;
using static System.Net.Mime.MediaTypeNames;

int[] mass;
Console.WriteLine("Введите 0 - если хотите ввести данные сами;");
Console.WriteLine("Введите 1 - если хотите считать данные с файла;");
Console.WriteLine("Введите 2 - если хотите получить случайные данные;");
int b = Convert.ToInt32(Console.ReadLine());
switch (b)
{
    case 0:
        ReadConsole Spisoc = new ReadConsole();
        Spisoc.read();
        mass = new int[Spisoc.spisoc.Count];
        Spisoc.spisoc.CopyTo(mass);
        break;
    case 1:
        ReadFile Spisoc1 = new ReadFile();
        Spisoc1.read_fille();
        mass = new int[Spisoc1.spisoc.Count];
        Spisoc1.spisoc.CopyTo(mass);
        break;
    case 2:
        ReadRandom Spisoc2 = new ReadRandom();
        Spisoc2.random_chislo();
        mass = new int[Spisoc2.spisoc.Count];
        Spisoc2.spisoc.CopyTo(mass);
        break;
    default:
        mass = new int[0];
        Console.WriteLine("Ошибка, перезапустите программу");
        break;
}


Console.WriteLine("Введите число 0 - если хотите отсортировать методом подсчетом.");
Console.WriteLine("Введите число 1 - если хотите отсортировать гномий сортировкой.");
Console.WriteLine("Введите число 2 - если хотите отсортировать сортировкой расческой.");
int с = Convert.ToInt32(Console.ReadLine());
switch (с)
{
    case 0:
        Pod_Sort Sortirov = new Pod_Sort(mass);
        Sortirov.pod_sort();
        Sortirov.show_mass3();
        break;
    case 1:
        Gnom_Sort Sortirov1 = new Gnom_Sort(mass);
        Sortirov1.gnom_sort();
        Sortirov1.show_mass1();
        break;
    case 2:
        Ras_Sort Sortirov2 = new Ras_Sort(mass);
        Sortirov2.ras_sort();
        Sortirov2.show_mass2();
        break;
    default:
        Console.WriteLine("Ошибка, перезапустите программу");
        break;
}



class ReadConsole
{
    public List<int> spisoc;
    public  ReadConsole()
    {
        spisoc = new List<int>();
    }
    public void read()
    {
        Console.WriteLine("Введите количество данных: ");
        int dlina_danye = Convert.ToInt32(Console.ReadLine());
        int chislo;
        Console.WriteLine("Введите данныe: ");
        for (int i = 0; i < dlina_danye; i++)
        {
            chislo = Convert.ToInt32(Console.ReadLine());
            spisoc.Add(chislo);
        }
    }
}

class ReadFile
{
    public List<int> spisoc;
    public ReadFile()
    {
        spisoc = new List<int>();
    }
    public void read_fille()
    {
        using (StreamReader potok = new StreamReader("E:\\Visual\\TEst\\FileList.txt"))
        {
            string prov = potok.ReadLine();
            int chislo;
            while (prov != null)
            {
                chislo = Convert.ToInt32(prov);
                spisoc.Add(chislo);
                prov = potok.ReadLine();
                Console.Write(chislo + " ");
            }
            Console.WriteLine();
        }
    }
}

class ReadRandom
{
    public List<int> spisoc;
    public ReadRandom()
    {
        spisoc = new List<int>();
    }
    public void random_chislo()
    {
        Console.WriteLine("Введите количество случайных чисел:");
        int a = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine("Введите верхнее границу чисел:");
        int b = Convert.ToInt32(Console.ReadLine());
        Random chislo = new Random();
        for (int i = 0; i < a; i++)
        {
            int x = chislo.Next(b);
            spisoc.Add(x);
            Console.Write(spisoc[i] + " ");
        }
        Console.WriteLine();
    }
}

class Gnom_Sort
{
    int[] mass_gnom;
    string elapsedTime;
    long col_perest = 0;
    long col_sravneniy = 0;
    public Gnom_Sort(int[] mass)
    {
        mass_gnom = mass.Take(mass.Length).ToArray();
    }
    public void gnom_sort()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();


        int i = 0;
        while (mass_gnom.Length > i) 
        {
            col_sravneniy++;
            if (i > 0 && mass_gnom[i] < mass_gnom[i - 1])
            {
                col_perest++;
                int g = mass_gnom[i];
                mass_gnom[i] = mass_gnom[i - 1];
                mass_gnom[i - 1] = g;
                i--;
            }
            else
                i = i + 1;

        }
        stopwatch.Stop();
        TimeSpan ts = stopwatch.Elapsed;
        elapsedTime = String.Format(" {0:00}:{1:00}:{2:00}.{3:00}", ts.TotalHours, ts.TotalMinutes, ts.TotalSeconds, ts.TotalMilliseconds);
        
    }
    public void show_mass1()
    {
        for (int i = 0;i < mass_gnom.Length; i++)
        {
            Console.Write(mass_gnom[i]);
            Console.Write(" ");
        }
        Console.WriteLine();
        Console.WriteLine("RunTime " + elapsedTime);
        Console.WriteLine("Количество перестановок: " + col_perest + " Количество сравнений: " + col_sravneniy);
    }

}

class Ras_Sort
{
    int[] mass_ras;
    string elapsedTime;
    long col_perest = 0;
    long col_sravneniy = 0;
    public Ras_Sort(int[] mass)
    {
        mass_ras = mass.Take(mass.Length).ToArray();
    }
    public void ras_sort()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        double f = 1.2473309;
        int n = mass_ras.Length;
        int step = Convert.ToInt32(Math.Floor(n / f));
        while (step >= 1) 
        {
            for (int i = 0; i < n - step ; i++)
            {
                col_sravneniy++;
                if (mass_ras[i] >
                    mass_ras[i + step])
                {
                    col_perest++;
                    int g = 0;
                    g = mass_ras[i];
                    mass_ras[i] = mass_ras[i + step];
                    mass_ras[i + step] = g;
                }
            }
            step = Convert.ToInt32(Math.Floor(step / f));
        }
        stopwatch.Stop();
        TimeSpan ts = stopwatch.Elapsed;
        elapsedTime = String.Format(" {0:00}:{1:00}:{2:00}.{3:00}", ts.TotalHours, ts.TotalMinutes, ts.TotalSeconds, ts.TotalMilliseconds);
    }
    public void show_mass2()
    {
        for (int i = 0; i < mass_ras.Length; i++)
        {
            Console.Write(mass_ras[i]);
            Console.Write(" ");
        }
        Console.WriteLine();
        Console.WriteLine("RunTime " + elapsedTime);
        Console.WriteLine("Количество перестановок: " + col_perest + " Количество сравнений: " + col_sravneniy);
    }
}

class Pod_Sort
{
    int[] mass_pod;
    string elapsedTime;
    long col_sravneniy = 0;
    public Pod_Sort(int[] mass)
    {
        mass_pod = mass.Take(mass.Length).ToArray();
    }
    public void pod_sort()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        int n = mass_pod.Length;
        int maxV = mass_pod[0];
        int minV = mass_pod[0];
        for (int i = 0; i < n; i++)
        {
            if (mass_pod[i] > maxV)
            {
                maxV = mass_pod[i];
            }
            if (mass_pod[i] < minV)
            {
                minV = mass_pod[i];
            }
        }
        int[] kol_mass = new int[maxV - minV + 1];
        for (int i = minV; i <= maxV; i++)
        {
            int kol = 0;
            for (int j = 0; j < n; j++)
            {
                col_sravneniy++;
                if (mass_pod[j] == i)
                {
                    kol++;
                }
            }
            kol_mass[i - minV] = kol;
        }
        int kur = 0;
        for (int i = 0; i < kol_mass.Length; i++)
        {
            for (int j = 0; j < kol_mass[i]; j++)
            {
                mass_pod[kur] = i + minV;
                kur++;
            }
        }
        stopwatch.Stop();
        TimeSpan ts = stopwatch.Elapsed;
        elapsedTime = String.Format(" {0:00}:{1:00}:{2:00}.{3:00}", ts.TotalHours, ts.TotalMinutes, ts.TotalSeconds, ts.TotalMilliseconds / 10);
    }
    public void show_mass3()
    {
        for (int i = 0; i < mass_pod.Length; i++)
        {
            Console.Write(mass_pod[i]);
            Console.Write(" ");
        }
        Console.WriteLine();
        Console.WriteLine("RunTime " + elapsedTime);
        Console.WriteLine("Количество сравнений: " + col_sravneniy + " Сортировка подсчетом, не содержит перестановок.");
    }
}
